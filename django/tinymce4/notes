https://github.com/joshbeitler/django-mce4

tinymce.util.XHR.send ({url: url, success: function (text) {
    callback (tinymce.util.JSON.parse(text));
}});

windowManager.open({ ... });
  https://github.com/2b3ez/FileManager4TinyMCE/blob/master/tinymce/plugins/image/plugin.min.js

Can put css in tinymce4/static?
# Current scheme:
tinymce4/static/tinymce4/tinymce.js	<-- update: renamed to init.js
tinymce4/static/tinymce4/tinymce.css
# Better scheme?
tinymce4/static/tinymce.css
tinymce4/static/tinymce.js


In your own templates containing a TinyMCE widget you must add the
following to the HTML HEAD section (assuming you named your form
‘form’):

    <head>
    ...
    {{ form.media }}
    </head>


# http://django-tinymce.googlecode.com/svn/tags/release-1.5/docs/.build/html/usage.html#using-the-view
If you cannot or will not change the widget on a form you can also use
the tinymce-js named view to convert some or all textfields on a page to
TinyMCE editors. On the template of the page, add the following lines to
the HEAD element:
<script type="text/javascript" src="{{ MEDIA_URL }}js/tiny_mce/tiny_mce.js"></script>
<script type="text/javascript" src="{% url tinymce-js "NAME" %}"></script>


## Admin

from django.db import models
from tinymce4.widgets import TinyMCE

class MyFlatPageAdmin (FlatPageAdmin):
    formfield_overrides = {
        models.TextField: { 'widget': TinyMCE },
        #models.TextField: { 'widget': TinyMCE(attrs={'cols': 20, 'rows': 20}) },
    }

# Note: To only override widget for some fields (not every TextField), use
# formfield_for_dbfield (self, db_field, **kwargs)
# @see http://django-tinymce.googlecode.com/svn/tags/release-1.5/docs/.build/html/usage.html#the-flatpages-link-list-view


# Can also override FlatpageForm
from django import forms
from django.contrib.flatpages.admin import FlatPageAdmin, FlatpageForm

from django.utils.translation import ugettext_lazy as _
class MyFlatpageForm (FlatpageForm):
    content = forms.CharField (label = _(u'content'), required=False,
                               widget = TinyMCE())

class MyFlatPageAdmin (FlatPageAdmin):
    form = MyFlatpageForm



https://docs.djangoproject.com/en/1.7/ref/contrib/csrf/#ajax
// function sameOrigin(url)


pass config from django
https://github.com/aljosa/django-tinymce/blob/master/tinymce/static/django_tinymce/init_tinymce.js


Howto configure tinymce4? Global config, and pass to Widget og Model.
The later will override the former.

- mce_attrs (default: {})
- content_language
- preview button/view
  https://github.com/aljosa/django-tinymce/blob/master/tinymce/templatetags/tinymce_tags.py
- howto add site css to editor

- Creating external link and image views
The TinyMCE link and image dialogs can be enhanced with a predefined
list of links and images.

from tinymce.views import render_to_link_list
def someview(request):
    objects = ...
    link_list = [(unicode(obj), obj.get_absolute_url()) for obj in objects]
    return render_to_link_list(link_list)
